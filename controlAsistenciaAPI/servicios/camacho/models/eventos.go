// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Eventos eventos
// swagger:model Eventos
type Eventos struct {

	// fecha
	// Required: true
	// Format: date-time
	Fecha *strfmt.DateTime `json:"fecha"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// tipo
	// Required: true
	Tipo TipoEvento `json:"tipo"`

	// usuario
	// Required: true
	Usuario *string `json:"usuario"`
}

// Validate validates this eventos
func (m *Eventos) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFecha(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTipo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsuario(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Eventos) validateFecha(formats strfmt.Registry) error {

	if err := validate.Required("fecha", "body", m.Fecha); err != nil {
		return err
	}

	if err := validate.FormatOf("fecha", "body", "date-time", m.Fecha.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Eventos) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Eventos) validateTipo(formats strfmt.Registry) error {

	if err := m.Tipo.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tipo")
		}
		return err
	}

	return nil
}

func (m *Eventos) validateUsuario(formats strfmt.Registry) error {

	if err := validate.Required("usuario", "body", m.Usuario); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Eventos) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Eventos) UnmarshalBinary(b []byte) error {
	var res Eventos
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

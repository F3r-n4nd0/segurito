// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// RegistrarSalidaHandlerFunc turns a function with the right signature into a registrar salida handler
type RegistrarSalidaHandlerFunc func(RegistrarSalidaParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegistrarSalidaHandlerFunc) Handle(params RegistrarSalidaParams) middleware.Responder {
	return fn(params)
}

// RegistrarSalidaHandler interface for that can handle valid registrar salida params
type RegistrarSalidaHandler interface {
	Handle(RegistrarSalidaParams) middleware.Responder
}

// NewRegistrarSalida creates a new http.Handler for the registrar salida operation
func NewRegistrarSalida(ctx *middleware.Context, handler RegistrarSalidaHandler) *RegistrarSalida {
	return &RegistrarSalida{Context: ctx, Handler: handler}
}

/*RegistrarSalida swagger:route POST /salidas registrarSalida

registra la salida del personal

registra la salida del personal por medio de su codigo (7 caracteres)

*/
type RegistrarSalida struct {
	Context *middleware.Context
	Handler RegistrarSalidaHandler
}

func (o *RegistrarSalida) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegistrarSalidaParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RegistrarSalidaBody registrar salida body
// swagger:model RegistrarSalidaBody
type RegistrarSalidaBody struct {

	// code
	// Required: true
	// Max Length: 7
	// Min Length: 7
	Code *string `json:"code"`
}

// Validate validates this registrar salida body
func (o *RegistrarSalidaBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegistrarSalidaBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("usuario"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	if err := validate.MinLength("usuario"+"."+"code", "body", string(*o.Code), 7); err != nil {
		return err
	}

	if err := validate.MaxLength("usuario"+"."+"code", "body", string(*o.Code), 7); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RegistrarSalidaBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegistrarSalidaBody) UnmarshalBinary(b []byte) error {
	var res RegistrarSalidaBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
